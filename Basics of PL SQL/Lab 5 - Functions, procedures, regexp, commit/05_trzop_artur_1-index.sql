-- ##################################################
--
--	Baza danych dla portalu spo³ecznoœciowego o ksi¹¿kach
-- 	2010 Copyright (c) Artur Trzop 12K2
--	Script v. 5.0.1
--
-- ##################################################

CLEAR SCREEN;
PROMPT ----------------------------------------------;
PROMPT Czyszczenie ekranu;
PROMPT ----------------------------------------------;
PROMPT ;


-- ##################################################
PROMPT ;
PROMPT ----------------------------------------------;
PROMPT 1. Tworzenie indexow;
PROMPT ----------------------------------------------;
PROMPT ;

-- na saturn2 ma byc tablespace STUDENT_INDEX
-- nazwa IX_CSR_FK1_KOM_REC oznacza ze mamy klucz obcy FK1 w tabeli KOM... który odnosi siê do tabeli REC...
-- indexy BITMAP nie dzia³aj¹ w wersji darmowej bazy
DROP INDEX IX_CSR_FK1_KOM_REC;
CREATE INDEX IX_CSR_FK1_KOM_REC
ON KOMENTARZE_DO_RECENZJI (REC_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX; 

DROP INDEX IX_CSR_FK2_KOM_UZY;
CREATE INDEX IX_CSR_FK2_KOM_UZY
ON KOMENTARZE_DO_RECENZJI (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK1_WWK_KSI;
CREATE INDEX IX_CSR_FK1_WWK_KSI
ON WERSJE_WYDANIA_KSIAZEK (KSI_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK2_WWK_UZY;
CREATE INDEX IX_CSR_FK2_WWK_UZY
ON WERSJE_WYDANIA_KSIAZEK (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK3_WWK_WER;
CREATE INDEX IX_CSR_FK3_WWK_WER
ON WERSJE_WYDANIA_KSIAZEK (WER_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK1_AUK_AUT;
CREATE INDEX IX_CSR_FK1_AUK_AUT
ON AUK_AUTORZY_KSIAZKI (AUT_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK2_AUK_KSI;
CREATE INDEX IX_CSR_FK2_AUK_KSI
ON AUK_AUTORZY_KSIAZKI (KSI_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK1_ULU_KSI;
CREATE INDEX IX_CSR_FK1_ULU_KSI
ON ULUBIONE_KSIAZKI (KSI_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK2_ULU_UZY;
CREATE INDEX IX_CSR_FK2_ULU_UZY
ON ULUBIONE_KSIAZKI (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK1_OPI_KSI;
CREATE INDEX IX_CSR_FK1_OPI_KSI
ON OPINIE_DO_KSIAZEK (KSI_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK2_OPI_UZY;
CREATE INDEX IX_CSR_FK2_OPI_UZY
ON OPINIE_DO_KSIAZEK (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK1_CYT_KSI;
CREATE INDEX IX_CSR_FK1_CYT_KSI
ON CYTATY_Z_KSIAZEK (KSI_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK2_CYT_UZY;
CREATE INDEX IX_CSR_FK2_CYT_UZY
ON CYTATY_Z_KSIAZEK (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK1_OCE_KSI;
CREATE INDEX IX_CSR_FK1_OCE_KSI
ON OCENY_KSIAZEK (KSI_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK2_OCE_UZY;
CREATE INDEX IX_CSR_FK2_OCE_UZY
ON OCENY_KSIAZEK (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK1_REC_KSI;
CREATE INDEX IX_CSR_FK1_REC_KSI
ON RECENZJE_KSIAZEK (KSI_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK2_REC_UZY;
CREATE INDEX IX_CSR_FK2_REC_UZY
ON RECENZJE_KSIAZEK (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK_WER_WYD;
CREATE INDEX IX_CSR_FK_WER_WYD
ON WERSJA_WYDANIA (WYD_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK1_ULA_AUT;
CREATE INDEX IX_CSR_FK1_ULA_AUT
ON ULA_ULUBIENI_AUTORZY (AUT_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK2_ULA_UZY;
CREATE INDEX IX_CSR_FK2_ULA_UZY
ON ULA_ULUBIENI_AUTORZY (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK1_KSI_KAT;
CREATE INDEX IX_CSR_FK1_KSI_KAT
ON KSIAZKI (KAT_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

DROP INDEX IX_CSR_FK2_KSI_UZY;
CREATE INDEX IX_CSR_FK2_KSI_UZY
ON KSIAZKI (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK_WYD_MIA;
CREATE INDEX IX_CSR_FK_WYD_MIA
ON WYDAWNICTWO (MIA_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK_AUT_UZY;
CREATE INDEX IX_CSR_FK_AUT_UZY
ON AUTORZY (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK_SES_UZY;
CREATE INDEX IX_CSR_FK_SES_UZY
ON SESJE_UZYTKOWNIKOW (UZY_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;

--# indexy dla kolejnej tabeli
DROP INDEX IX_CSR_FK_UZY_MIA;
CREATE INDEX IX_CSR_FK_UZY_MIA
ON UZYTKOWNICY (MIA_ID)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;





--# Bardziej zaawansowane przyk³ady ###############################################
-- konwencja oznaczenia: UZY__LOGIN = UZY prefix tabeli, __NAZWA_ATRYBUTU z tej tabeli

--### Index unikatowy dla adresu email. Nie mog¹ siê powtarzaæ emaile w bazie. 
-- Czyli na tej sam adres email nie mo¿e byæ zarejestrowane kilka kont.
DROP INDEX IXU_UZY__EMAIL;
CREATE UNIQUE INDEX IXU_UZY__EMAIL
ON UZYTKOWNICY (UZY_EMAIL)
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;


--### Index funkcyjny na tytul ksiazki. 
-- Podczas wyszukiwania ksiazki wielkosc znakow nie bedzie miala znaczenie.
-- Ksiazki beda wyszukiwane za pomoc¹ takiego zapytania:
-- 		select * from KSIAZKI where LOWER(KSI_TYTUL) LIKE LOWER('%szukana fraza%');
DROP INDEX IXU_KSI__TYTUL;
CREATE INDEX IXU_KSI__TYTUL
ON KSIAZKI (LOWER(KSI_TYTUL))
STORAGE (INITIAL 150k NEXT 150k)
TABLESPACE STUDENT_INDEX;




-- ##################################################
PROMPT ;
PROMPT ----------------------------------------------;
PROMPT 2. Pobranie przykladowych danych z tabel na ktore nalozono indexy;
PROMPT ----------------------------------------------;
PROMPT ;

--### Pozwala pobrac tytul ksiazki niezaleznie od wpisanej wielkosci znakow! Uzywa indexu na pole KSI_TYTUL
COLUMN KSI_TYTUL FORMAT A20;
COLUMN KAT_NAZWA FORMAT A20;

SELECT KSI_TYTUL, KAT_NAZWA 
FROM KSIAZKI K LEFT JOIN KATEGORIE_KSIAZEK KK ON K.KAT_ID = KK.KATK_1_ID 
WHERE LOWER(KSI_TYTUL) LIKE LOWER('%waLL%');


-- Pobieramy wydawnictwa i miasta z ktorych pochodza
COLUMN WYD_NAZWA_WYDAWNICTWA HEADING 'WYDAWNICTWO' FORMAT A20;
COLUMN MIA_MIASTO HEADING 'MIASTO' FORMAT A20;
SELECT WYD_NAZWA_WYDAWNICTWA, MIA_MIASTO FROM WYDAWNICTWO W, MIASTO M WHERE W.MIA_ID = M.MIAK_1_ID;  












COMMIT;